Problem #2 

Description : 
You are given two non-empty linked lists representing two non-negative integers.
The digits are stored in reverse order and each of their nodes contain a single digit.
Add the two numbers and return it as a linked list.
You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Example:

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
Explanation: 342 + 465 = 807.

Solution: 
Programming Language: C++ 
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
   ListNode head(0), *pre ;   //creates an empty ListNode head and a pointer pre  
 pre = &head ;     //pointing the pointer towards the head 
        int carry = 0 ; 
        while (((l1!=NULL)|| (l2!=NULL) ||carry)) 
        {
         int sum = (l1 ? l1->val : 0 )+ (l2 ? l2->val : 0) + carry ; 
            carry = sum / 10 ; 
            int value = sum % 10 ; 
            pre->next = new ListNode(value) ;   //adding the value to a new ListNode whose pointer lies in next of the head
            pre = pre -> next ;    //pointer pre points towards the newly ListNode now  
            l1 = l1  ? l1->next : l1 ; 
            l2 = l2 ? l2->next : l2 ; 
        }
        return head.next ; 
    }
};

Programming Language: Java 
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
          ListNode head = new ListNode(0) ;   //creating a ListNode that contains 0 and he next field contains null  
 ListNode AddressToHead = head ; // this ListNode AddressToHead basically contains the address of the head in the next field 
        int carry = 0 ;              
        while ((l1!=null)|| (l2!=null)) 
        { 
int sum = 0 ;     
         if(l1==null)   //to avoind null pointer exception 
 sum = sum + carry; 
            else 
 sum =  sum +  carry + l1.val ; 
            if(l2==null)  //to avoind null pointer exception 
sum = sum + 0 ; 
            else 
                sum = sum + l2.val ; 
            carry = sum / 10 ;        //for calculating the carry 
            int value = sum % 10 ;    //for calculating the actual sum 
            AddressToHead.next = new ListNode(value) ;   //adding the sum (value) by creating a new ListNode 
            AddressToHead = AddressToHead.next ;    //AddressToHead now conatins the address to the new ListNode created
            
            //for iteration purpose
           if(l1!=null)      
                l1 = l1.next ; 
            else
                l1 = null ; 
           if(l2!=null)
                l2 = l2.next ;
            else
                l2 = null ;
            
            //when the both the input list read their endpoint but thhere is still a carry left
            if((l1==null)&&(l2==null)&&(carry!=0))  
                
            {
                 AddressToHead.next = new ListNode(carry) ; //creates a new ListNode to add the carry to it  
              AddressToHead = AddressToHead.next ;  //AddressToHead contains the address to the new ListNode created      
        }
        }
        return head.next;   // the next field of the head contains the list  
    }
    }

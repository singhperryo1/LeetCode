Problem #560


Description: 
Given an array of integers and an integer k, you need to find the total number of continuous subarrays whose sum equals to k.

Example 1:
Input:nums = [1,1,1], k = 2
Output: 2
Note:
The length of the array is in range [1, 20,000].
The range of numbers in the array is [-1000, 1000] and the range of the integer k is [-1e7, 1e7].

Programming Language: C++ 

class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {
        int counter = 0 ;      //to keep count of the no of subarrays
        for(int i=0; i<nums.size();i++)
        {
            int sum = 0 ;   
            for(int j=i; j<nums.size(); j++)
            {
                if(j==i)   //for every first iteration of inner loop 
                    sum+=nums[i];   
                else
                    sum+=nums[j]; 
                if(sum==k)     //testing condition 
                    counter++ ; 
            }
            
            
        }
        return counter ; 
    }
};

Programming Language: Java 

class Solution {
    public int subarraySum(int[] nums, int k) {
        int counter = 0 ;  //to count the number of subarrays
        for(int i =0; i<nums.length; i++)
        {
            int sum = 0 ; 
            for(int j=i; j<nums.length;j++)
            {
                if(j==i)   //for every first iteration of the inner loop 
                    sum +=nums[i]; 
                else
                sum +=nums[j];
                if(sum ==k)   //the testing condition 
                    counter++; 
            }
        }
        return counter++ ; 
    }
}

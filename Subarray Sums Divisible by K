Problem #974

Description: 

Given an array A of integers, return the number of (contiguous, non-empty) subarrays that have a sum divisible by K.

 

Example 1:

Input: A = [4,5,0,-2,-3,1], K = 5
Output: 7
Explanation: There are 7 subarrays with a sum divisible by K = 5:
[4, 5, 0, -2, -3, 1], [5], [5, 0], [5, 0, -2, -3], [0], [0, -2, -3], [-2, -3]
 

Note:

1 <= A.length <= 30000
-10000 <= A[i] <= 10000
2 <= K <= 10000

Solution: 
Programming Language: C++ 
class Solution {
public:
    int subarraysDivByK(vector<int>& A, int K) {
         int counter = 0 ;        // to count the number of subarrays 
        for (int i=0; i<A.size(); i++)
        { 
            int sum = 0 ; 
                for (int j=i; j<A.size(); j++)
                {
                    if(j==i)         //to avoid j+j in the 1st iteration of the loop
                        sum = A[i];  //checking the integers alone 
            else                    //when the i!=j  
                sum = sum + A[j];        
                    if((sum==0)||(sum%K==0))   
                        counter++ ; 
        }
    }
        return counter;
    }
};

Programming Language: Java
class Solution {
    public int subarraysDivByK(int[] A, int K) {
     int counter = 0 ;        // to count the number of subarrays 
        for (int i=0; i<(A.length); i++)
        { 
            int sum = 0 ; 
                for (int j=i; j<A.length; j++)
                {
                    if(j==i)         //to avoid j+j in the 1st iteration of the loop
                        sum = A[i];  //checking the integers alone 
            else                    //when the i!=j  
                sum = sum + A[j];        
                    if((sum==0)||(sum%K==0))   
                        counter++ ; 
        }
    }
        return counter; 
    }
}
